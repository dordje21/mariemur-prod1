theme.RangeOfPrice = function() {

    function RangeOfPrice() {
        this.dom = {};
    };
    function prettify(num) {
        var n = num.toString();
        return n.replace(/(\d{1,3}(?=(?:\d\d\d)+(?!\d)))/g, '$1' + ' ')
    }
    RangeOfPrice.prototype = $.extend({}, RangeOfPrice.prototype, {
        init: function() {
            this.dom.$range = $('.js-range-of-price');
            var $parent = this.dom.$range.closest('.range-box'),
                $filter = this.dom.$range.closest('.catalog-filter'),
                $inputFrom = $parent.find('.range-box__value-from'),
                $inputTo = $parent.find('.range-box__value-to'),
                min = parseInt(this.dom.$range.attr('data-min')),
                max = parseInt(this.dom.$range.attr('data-max')),
                valueFrom = parseInt(this.dom.$range.attr('data-from')),
                valueTo = parseInt(this.dom.$range.attr('data-to'));
            function updateInputs(data) {
                var from = data.from, to = data.to;
                $inputFrom.prop('value', prefix + prettify(from));
                $inputTo.prop('value', prefix + prettify(to))
            }
            var prefix = '';
            if (this.dom.$range.attr('data-prefix') !== undefined) {
                prefix = this.dom.$range.attr('data-prefix')
            }
            if (Currency){
                switch (Currency.currentCurrency){
                    case "EUR":
                        prefix = '€'
                        break;
                    case "USD":
                        prefix = '$'
                        break;
                    case "GBP":
                        prefix = '£'
                        break;

                }
            }
            updateInputs({
                from:!isNaN(valueFrom)?valueFrom:min,
                to:!isNaN(valueTo)?valueTo:max
            })

            if(this.dom.$range.length) {
                var params = {
                    type: "double",
                    force_edges: true,
                    prettify: function (data) {
                        return Shopify.formatMoney(data * 100, theme.moneyFormat);
                    },
                    onChange:updateInputs
                };

                if (Currency) {
                    this.dom.$range.on('change', function () {
                        theme.ProductCurrency.update();
                    });

                    $.extend(params, {
                        onStart: function () {
                            setTimeout(function () {
                                theme.ProductCurrency.update();
                            }, 0);
                        },
                        onFinish: function () {
                            theme.ProductCurrency.update();
                            theme.Collections.onChangeControls();
                        }
                    });
                }

                this.dom.$range.ionRangeSlider(params);
                instance = this.dom.$range.data('ionRangeSlider');
                $filter.find('[type="reset"]').on('click',function () {
                    if (Currency){
                        switch (Currency.currentCurrency){
                            case "EUR":
                                prefix = '€'
                                break;
                            case "USD":
                                prefix = '$'
                                break;
                            case "GBP":
                                prefix = '£'
                                break;

                        }
                    }
                    instance.update({from: min, to: max});
                    setTimeout(function () {
                        $inputFrom.val(prefix + prettify(min));
                        $inputTo.val(prefix + prettify(max));
                    }, 100)
                    $(instance.input).trigger('change')
                });
                $('.js-catalog-filter-toggle').on('click',function () {
                    setTimeout(function () {
                        if (Currency){
                            switch (Currency.currentCurrency){
                                case "EUR":
                                    prefix = '€'
                                    break;
                                case "USD":
                                    prefix = '$'
                                    break;
                                case "GBP":
                                    prefix = '£'
                                    break;

                            }
                        }
                        console.log(instance)
                        $inputFrom.val(prefix + prettify(instance.old_from));
                        $inputTo.val(prefix + prettify(instance.old_to));
                    }, 100)
                });
            }
        },
        destroy: function () {
            if(this.dom.$range && this.dom.$range.data('ionRangeSlider')) {
                this.dom.$range.ionRangeSlider('destroy');
                delete this.dom;
            }
        },
        update: function(from, to) {
            if(this.dom.$range) {
                var api = this.dom.$range.data('ionRangeSlider');
                api.update({
                    from: from,
                    to: to
                });
            }
        },
        reset: function() {

            if(this.dom.$range.length) {
                var api = this.dom.$range.data('ionRangeSlider');
                var $parent = this.dom.$range.closest('.range-box'),
                    $filter = this.dom.$range.closest('.catalog-filter'),
                    $inputFrom = $parent.find('.range-box__value-from'),
                    $inputTo = $parent.find('.range-box__value-to'),
                    min = parseInt(this.dom.$range.attr('data-min')),
                    max = parseInt(this.dom.$range.attr('data-max')),
                    valueFrom = parseInt(this.dom.$range.attr('data-from')),
                    valueTo = parseInt(this.dom.$range.attr('data-to'));
                function updateInputs(data) {
                    var from = data.from, to = data.to;
                    $inputFrom.prop('value', prefix + prettify(from));
                    $inputTo.prop('value', prefix + prettify(to))
                }
                var prefix = '';

                if (this.dom.$range.attr('data-prefix') !== undefined) {
                    prefix = this.dom.$range.attr('data-prefix')
                }
                if (Currency){
                    switch (Currency.currentCurrency){
                        case "EUR":
                            prefix = '€'
                            break;
                        case "USD":
                            prefix = '$'
                            break;
                        case "GBP":
                            prefix = '£'
                            break;

                    }
                }
                updateInputs({
                    from:!isNaN(valueFrom)?api.result.min:min,
                    to:!isNaN(valueTo)?api.result.max:max
                })
                api.update({
                    from: api.result.min,
                    to: api.result.max
                });
            }
        }
    });

    theme.RangeOfPrice = new RangeOfPrice;
};

$(function() {
    theme.RangeOfPrice();
});
