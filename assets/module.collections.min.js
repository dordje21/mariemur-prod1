theme.Collections = function () {
    function t() {
        this.dom = {$collections: $(".js-collections")}, this.dom.$collections.length && this.load()
    }

    t.prototype = $.extend({}, t.prototype, {
        current: {url: null, ajax: null},
        url: {collection: null, params: null},
        controls: {collection: null, params: null},
        content: {collection: null},
        _parseUrl: function () {
            function t(t) {
                $.each(t, function () {
                    if ("custom-filter" !== this) {
                        e.url.params || (e.url.params = {});
                        var t = this.split("="), a = t[0], n = t[1];
                        "tag" === a && (a = "constraint"), e.url.params[a] || (e.url.params[a] = []), e.url.params[a].push(n)
                    }
                })
            }

            var e = this;
            this.current.url = decodeURIComponent(window.location.href), this.current.ajax = this.current.url, this.current.ajax.indexOf("view=") != -1 ? $.each([6, 12, 18, 24], function () {
                e.current.ajax.replace("view=" + this, "view=" + this + "-ajax")
            }) : (this.current.ajax += this.current.ajax.indexOf("?") != -1 ? "&" : "?", this.current.ajax += "view=ajax");
            var a = this.current.url.split("collections/")[1].split("/");
            this.url.collection = a[0].split("?")[0], this.url.params = null;
            var n = this.current.url.indexOf("custom-filter") != -1;
            if (this.current.url.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (a, o, i) {
                var l = i.split("+");
                n && "constraint" === o ? t(l) : (e.url.params || (e.url.params = {}), e.url.params[o] = l)
            }), a[1] && a[1].split("?")[0].length) {
                var o = a[1].split("?")[0].split("+");
                e.url.params || (e.url.params = {}), e.url.params.constraint || (e.url.params.constraint = []), $.each(o, function () {
                    e.url.params.constraint.push(this)
                })
            }
        },
        _buildUrl: function (t) {
            var e = this, a = {}, n = {}, o = this.controls.collection ? this.controls.collection : this.url.collection;
            this.current.url = "/collections/" + o, this.controls.params && (this.controls.params.vendor || this.controls.params.type || this.controls.params.title || this.controls.params.price || this.controls.params.only_available || window.page.default.only_available ? (a.constraint = "custom-filter", n.constraint = "custom-filter", $.each(["constraint", "vendor", "type", "title", "price", "page", "only_available"], function (o, i) {
                if (e.controls.params[this]) {
                    var l = "constraint" === i ? "tag" : i, r = !1;
                    $.each(t, function (t, e) {
                        l === e && (r = e)
                    }), l = "+" + l + "=";
                    var c = l + e.controls.params[i].join("price" === i ? "-" : l);
                    r || (a.constraint += c.replace(/ /gi, "-")), n.constraint += c.replace(/ /gi, "-")
                }
            }), !this.controls.params.only_available && window.page.default.only_available && (n.constraint += "+only_available=true"), $.each(["sort_by", "view"], function () {
                if (e.controls.params[this]) {
                    var t = e.controls.params[this][0];
                    a[this] = t, n[this] = t
                }
            })) : ($.each(this.controls.params, function (t, e) {
                var o = e.join("+");
                a[t] = o, n[t] = o
            }), $.each(t, function () {
                delete a[this]
            }))), n.view = n.view ? n.view + "-ajax" : "ajax", a = $.param(a), n = $.param(n), this.current.ajax = this.current.url, a && (this.current.url += "?" + decodeURIComponent(a)), n && (this.current.ajax += "?" + decodeURIComponent(n))
        },
        _setUrl: function () {
            history.pushState({foo: "filters"}, this.current.url, this.current.url)
        },
        _parseControls: function () {
            var t = this, e = {};
            this.controls.collection = null, this.controls.params = null, $.each(["collection"], function () {
                var e = $('[name="' + this + '"]:checked').val();
                e && (t.controls[this] = e)
            }), this.controls.collection || (this.controls.collection = this.url.collection), $.each({
                sort_by: "sort_by",
                view: "view_length",
                only_available: "only_available"
            }, function (t, a) {
                var n = $('[name="' + a + '"]').val(), o = window.page.default[a] + "";
                n && n !== o && (e[t] = [n])
            }), $.each({
                constraint: ["collection_with_tag", "filter_by_tag", "filter_by_color"],
                vendor: "filter_by_vendor",
                type: "filter_by_type"
            }, function (t, a) {
                var n = [];
                $.each($.isArray(a) ? a : [a], function () {
                    $('[name="' + this + '"]:checked').each(function () {
                        for (var t = $(this).val(), e = 0; e < n.length; e++) if (n[e] === t) return;
                        n.push(t)
                    })
                }), n.length && (e[t] = n)
            }), $(["filter_by_title"]).each(function () {
                var t = $('[name="' + this + '"]').val();
                t && (e.title = [t])
            }), $(["filter_by_price"]).each(function () {
                var t = $('[name="' + this + '"]'), a = t.val();
                if (a) {
                    var n = a ? a.split(";") : null, o = n ? +n[0] : +t.attr("data-from"),
                        i = n ? +n[1] : +t.attr("data-to");
                    o === +t.attr("data-min") && i === +t.attr("data-max") || (e.price = [100 * o, 100 * i])
                }
            }), $(["filter_by_title"]).each(function () {
                var t = $('[name="' + this + '"]').val();
                t && (e.title = [t])
            }), $(["page"]).each(function () {
                var t = $('[name="' + this + '"]').val();
                t && 1 !== +t && (e[this] = [t])
            }), Object.keys(e).length && (this.controls.params = e)
        },
        _setControls: function () {
            var t = this;
            if ($.each({sort_by: "sort_by", view: "view_length"}, function (e, a) {
                var n = t.url.params && t.url.params[e] ? t.url.params[e] : window.page.default[a];
                $('[name="' + a + '"]').val(n).trigger("update")
            }), $('[name="collection"]').removeAttr("checked"), $('[name="collection"][value="' + this.url.collection + '"]').prop("checked", "checked"), $('[name="collection_with_tag"], [name="filter_by_tag"], [name="filter_by_color"], [name="filter_by_vendor"], [name="filter_by_type"], [name="only_available"]').removeAttr("checked"), $.each({
                constraint: ["collection_with_tag", "filter_by_tag", "filter_by_color"],
                vendor: "filter_by_vendor",
                type: "filter_by_type",
                only_available: "only_available"
            }, function (e, a) {
                t.url.params && t.url.params[e] && $.each(t.url.params[e], function () {
                    var e = this;
                    $.each($.isArray(a) ? a : [a], function () {
                        var a = "collection_with_tag" === this ? '[data-section-for-collection="' + t.url.collection + '"] ' : "";
                        $(a + '[name="' + this + '"][value="' + e + '"]').prop("checked", "checked")
                    })
                })
            }), $('[name="filter_by_title"]').val(this.url.params && this.url.params.title ? this.url.params.title : ""), this.url.params && this.url.params.price) {
                var e = this.url.params.price[0].split("-");
                theme.RangeOfPrice && theme.RangeOfPrice.update(e[0] / 100, e[1] / 100)
            } else theme.RangeOfPrice && theme.RangeOfPrice.reset()
        },
        _checkCurrentFilters: function (t) {
            t && (delete t.page, delete t.sort_by, delete t.view), this.$current_filter[t && Object.keys(t).length ? "removeClass" : "addClass"]("d-none")
        },
        loadContent: function (t, e, a) {
            var n = this;
            this.xhr && this.xhr.abort(), theme.Loader.set($('[data-js-collection-replace="products"]'), {
                fixed: !0,
                spinner: !theme.current.is_mobile && null
            }), this.xhr = $.ajax({
                type: "GET", url: this.current.ajax, cache: !1, dataType: "html", success: function (o) {
                    var i = $(o);
                    theme.ProductsView && theme.ProductsView.update(i.find("[data-js-products]")), $("[data-js-collection-replace]").each(function () {
                        var a = $(this), o = a[0].hasAttribute("data-js-collection-replace-only-full");
                        if (n.content.collection !== t.collection || !o) {
                            var l, r = a.attr("data-js-collection-replace"),
                                c = $('[data-js-collection-replace="' + r + '"]'),
                                s = i.find('[data-js-collection-replace="' + r + '"]');
                            "page" === e && "add" === c.attr("data-js-collection-replace-method") ? (c.append(s.children()), "products" === r && theme.Loader.unset(c)) : (c.replaceWith(s), s[0].hasAttribute("data-js-collection-replace-hide-empty") && (l = s.parents("[data-js-collection-nav-section]"), l[s.find("input").length ? "removeClass" : "addClass"]("d-none")), "products" === r && theme.Loader.unset(s), c.remove()), n.$pagination = n.dom.$collections.find("[data-js-collection-pagination]"), theme.current.is_mobile && theme.Loader.unset(n.$sidebar)
                        }
                    }), theme.ImagesLazyLoad.update(), n.content.collection !== t.collection && $.each({
                        sort_by: "sort_by",
                        view: "view_length"
                    }, function (e, a) {
                        var n = t.params && t.params[e] ? t.params[e] : window.page.default[a];
                        $('[name="' + a + '"]').val(n).trigger("update")
                    }), theme.ProductCurrency.update(), theme.StoreLists.checkProductStatus(), theme.ProductReview.update(), theme.Tooltip && theme.Tooltip.init(), i.remove(), n.xhr = null, n.content.collection = t.collection, a && a()
                }
            })
        },
        removeFilter: function (t, e) {
            switch (t) {
                case"tag":
                    $('[name="collection_with_tag"], [name="filter_by_tag"], [name="filter_by_color"]').filter('[value="' + e + '"]').removeAttr("checked");
                    break;
                case"title":
                    $('[name="filter_by_title"]').val("");
                    break;
                case"price":
                    theme.RangeOfPrice && theme.RangeOfPrice.reset();
                    break;
                case"vendor":
                    $('[name="filter_by_vendor"]').filter('[value="' + e + '"]').removeAttr("checked");
                    break;
                case"type":
                    $('[name="filter_by_type"]').filter('[value="' + e + '"]').removeAttr("checked")
            }
        },
        onChangeControls: function (t, e) {
            var a = this;
            theme.current.is_mobile && theme.Loader.set(this.$sidebar, {fixed: !0}), "page" !== t && $('[name="page"]').val(1), this._parseControls(), this._buildUrl(e), this._setUrl(), this.loadContent(this.controls, t, function () {
                a._checkCurrentFilters(a.controls.params)
            })
        },
        onChangeHistory: function () {
            var t = this;
            theme.current.is_mobile && theme.Loader.set(this.$sidebar, {fixed: !0}), this._parseUrl(), this._setControls(), this.loadContent(this.url, null, function () {
                t._checkCurrentFilters(t.url.params)
            })
        },
        load: function () {
            var t = this, e = $("[data-js-collection-sidebar]");
            this.$collections_body = $("[data-js-collections-body]"), this.$sidebar = e, this.$current_filter = e.find('[data-js-collection-nav-section="current_filters"]'), this.$pagination = this.dom.$collections.find("[data-js-collection-pagination]"), this._parseUrl(), this.content.collection = t.url.collection, e.on("change", "[data-js-collections-menu] input", function () {
                var e = $(this), a = e.attr("name");
                if ("collection" === a) $('[data-js-collections-menu] [name="collection_with_tag"]:checked').removeAttr("checked"), $('[name="filter_by_tag"], [name="filter_by_color"], [name="filter_by_vendor"], [name="filter_by_type"]').removeAttr("checked"), $('[name="filter_by_title"]').val(""), $('[name="sort_by"]').val(page.default.sort_by), $('[name="view"]').val(page.default.view_length), $.each({
                    sort_by: "sort_by",
                    view: "view_length"
                }, function (t, e) {
                    $('[name="' + e + '"]').val(window.page.default[e]).trigger("update")
                }), theme.RangeOfPrice && theme.RangeOfPrice.reset(); else if ("collection_with_tag" === a) {
                    var n = e.parents(".collections-menu__item").find('[name="collection"]'),
                        o = $('[data-js-collections-menu] [name="collection"]:checked').not(n);
                    o.add(o.parents(".collections-menu__item").find('[name="collection_with_tag"]:checked')).removeAttr("checked"), n.is(":checked") || theme.RangeOfPrice && theme.RangeOfPrice.reset(), n.prop("checked", "checked")
                }
                t.onChangeControls()
            }), e.on("click", '[data-js-collections-menu] [name="collection"]:checked', function () {
                var t = $(this), e = t.parents(".collections-menu__item").find('[name="collection_with_tag"]:checked');
                e.length && (e.removeAttr("checked"), t.change())
            }), e.on("change", "[data-js-collection-filters] input", function () {
                t.onChangeControls()
            }), e.on("change", '[name="only_available"]', function () {
                var e = $(this), a = !!e.is(":checked");
                e.attr("value", a), t.onChangeControls()
            }), e.on("click", "[data-js-collection-filter-by-title] button", function () {
                t.onChangeControls()
            }), e.on("keyup", "[data-js-collection-filter-by-title] input", $.debounce(500, function () {
                t.onChangeControls()
            })), this.dom.$collections.on("change", "[data-js-collection-sort-by] select, [data-js-collection-view-length] select", function () {
                t.onChangeControls()
            }), this.dom.$collections.on("click", "[data-js-collection-pagination] a", function (e) {
                var a, n, o = $(this), i = o.parents("[data-js-collection-pagination]"),
                    l = o.attr("data-value") || o.attr("href").split("page=")[1].split("&")[0],
                    r = i.attr("data-pagination-type"), c = "page";
                return $('[name="page"]').val(l), "button_load_more" !== r && "infinite_scroll" !== r || (a = ["page"]), t.onChangeControls(c, a), "button_load_more" !== r && "infinite_scroll" !== r && (n = theme.StickyHeader && theme.StickyHeader.$sticky ? theme.StickyHeader.$sticky.stickyHeader("getStickyHeight") : 0, $("html, body").velocity("stop").velocity("scroll", {
                    offset: t.$collections_body.offset().top - n,
                    duration: 1e3 * theme.animations.pagination.scroll_duration
                })), e.preventDefault(), !1
            }), "infinite_scroll" === this.$pagination.attr("data-pagination-type") && $window.on("load", function () {
                $window.on("scroll", function () {
                    var e = t.$pagination[0].getBoundingClientRect();
                    e.top < theme.current.height && !t.$pagination[0].hasAttribute("data-js-loading") && (t.$pagination.attr("data-js-loading", !0), t.$pagination.find("a").trigger("click"))
                })
            }), e.on("click", "[data-js-collection-current-tags] [data-value]", function () {
                var e = $(this), a = e.attr("data-value"), n = e.attr("data-filter-type");
                t.removeFilter(n, a), t.onChangeControls()
            }), e.on("click", "[data-js-collection-current-tags-clear]", function () {
                $("[data-js-collection-current-tags] [data-value]").each(function () {
                    var e = $(this), a = e.attr("data-value"), n = e.attr("data-filter-type");
                    t.removeFilter(n, a)
                }), t.onChangeControls()
            }), $(window).on("popstate", function () {
                t.onChangeHistory()
            })
        },
        logs: function () {
            console.log("current", this.current), console.log("url", this.url), console.log("controls", this.controls), console.log("content", this.content), console.log(this.logId ? ++this.logId : this.logId = 1)
        }
    }), theme.Collections = new t
}, $(function () {
    theme.Collections()
});
